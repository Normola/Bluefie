# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # Custom rules to enforce our coding style:
  # - No else statements (prefer early returns)
  # - Minimal nesting
  # - Clean, readable code patterns
  rules:
    # Code style preferences
    prefer_single_quotes: true
    prefer_const_constructors: true
    prefer_const_literals_to_create_immutables: true

    # Reduce complexity and nesting
    avoid_unnecessary_containers: true
    avoid_redundant_argument_values: true
    prefer_if_null_operators: true
    prefer_null_aware_operators: true

    # Readability improvements
    use_key_in_widget_constructors: true
    prefer_const_constructors_in_immutables: true
    sort_child_properties_last: true

    # Performance and best practices
    avoid_print: false # We allow print for debugging in this project
    prefer_final_locals: true
    prefer_final_in_for_each: true
    unnecessary_late: true

    # Flutter specific
    use_build_context_synchronously: true
    avoid_web_libraries_in_flutter: true
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
