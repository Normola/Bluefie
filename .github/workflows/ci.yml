name: CI

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]

env:
  FLUTTER_VERSION: '3.24.3'
  JAVA_VERSION: '17'

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Verify Flutter installation
        run: flutter doctor -v

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze code
        run: flutter analyze --fatal-infos

      - name: Check for outdated dependencies
        run: flutter pub outdated

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run unit tests
        run: flutter test test/unit/ --coverage

      - name: Run widget tests
        run: flutter test test/widget/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    needs: [analyze, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Build debug APK
        run: flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ github.sha }}
          path: build/app/outputs/flutter-apk/app-debug.apk
          retention-days: 7

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [analyze, test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Build profile APK for validation
        run: flutter build apk --profile

      - name: Validate APK size
        run: |
          APK_SIZE=$(stat -c%s "build/app/outputs/flutter-apk/app-profile.apk")
          APK_SIZE_MB=$(echo "scale=2; $APK_SIZE / 1024 / 1024" | bc)
          echo "APK Size: ${APK_SIZE_MB} MB"

          # Fail if APK is larger than 50MB (adjust as needed)
          if (( $(echo "$APK_SIZE_MB > 50" | bc -l) )); then
            echo "❌ APK size ($APK_SIZE_MB MB) exceeds 50MB limit"
            exit 1
          else
            echo "✅ APK size is within acceptable limits"
          fi

      - name: Comment APK size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'build/app/outputs/flutter-apk/app-profile.apk';
            const stats = fs.statSync(path);
            const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

            const comment = `## 📱 APK Build Report

            **Profile APK Size**: ${fileSizeInMB} MB

            Build completed successfully! ✅`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-security-check:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run dependency audit
        run: |
          echo "## 🔍 Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for known vulnerabilities (this is a basic check)
          if dart pub deps --json | grep -q "\"kind\": \"vulnerability\""; then
            echo "⚠️ Potential security vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No known security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Dependency Tree" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          dart pub deps --style=compact >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
