// Mocks generated by Mockito 5.4.4 from annotations
// in blufie_ui/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i16;

import 'package:battery_plus/battery_plus.dart' as _i8;
import 'package:blufie_ui/models/app_settings.dart' as _i2;
import 'package:blufie_ui/models/bluetooth_device_record.dart' as _i13;
import 'package:blufie_ui/services/battery_service.dart' as _i7;
import 'package:blufie_ui/services/database_helper.dart' as _i12;
import 'package:blufie_ui/services/location_service.dart' as _i10;
import 'package:blufie_ui/services/settings_service.dart' as _i5;
import 'package:flutter_blue_plus/flutter_blue_plus.dart' as _i15;
import 'package:flutter_blue_plus_platform_interface/flutter_blue_plus_platform_interface.dart'
    as _i4;
import 'package:geolocator/geolocator.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:shared_preferences/shared_preferences.dart' as _i14;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppSettings_0 extends _i1.SmartFake implements _i2.AppSettings {
  _FakeAppSettings_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceIdentifier_2 extends _i1.SmartFake
    implements _i4.DeviceIdentifier {
  _FakeDeviceIdentifier_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i5.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i2.AppSettings> get settingsStream => (super.noSuchMethod(
        Invocation.getter(#settingsStream),
        returnValue: _i6.Stream<_i2.AppSettings>.empty(),
      ) as _i6.Stream<_i2.AppSettings>);

  @override
  _i2.AppSettings get currentSettings => (super.noSuchMethod(
        Invocation.getter(#currentSettings),
        returnValue: _FakeAppSettings_0(
          this,
          Invocation.getter(#currentSettings),
        ),
      ) as _i2.AppSettings);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateSettings(_i2.AppSettings? newSettings) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [newSettings],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateAutoScanning(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateAutoScanning,
          [enabled],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateBatteryOptimization(
    bool? enabled,
    int? thresholdPercent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBatteryOptimization,
          [
            enabled,
            thresholdPercent,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateScanInterval(int? seconds) => (super.noSuchMethod(
        Invocation.method(
          #updateScanInterval,
          [seconds],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateDataRetention(int? days) => (super.noSuchMethod(
        Invocation.method(
          #updateDataRetention,
          [days],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateLocationTracking(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateLocationTracking,
          [enabled],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateVerboseLogging(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateVerboseLogging,
          [enabled],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateNotifications(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateNotifications,
          [enabled],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateAutoScanWhenPluggedIn(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAutoScanWhenPluggedIn,
          [enabled],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> resetToDefaults() => (super.noSuchMethod(
        Invocation.method(
          #resetToDefaults,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BatteryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatteryService extends _i1.Mock implements _i7.BatteryService {
  MockBatteryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<int> get batteryLevelStream => (super.noSuchMethod(
        Invocation.getter(#batteryLevelStream),
        returnValue: _i6.Stream<int>.empty(),
      ) as _i6.Stream<int>);

  @override
  _i6.Stream<bool> get lowBatteryStream => (super.noSuchMethod(
        Invocation.getter(#lowBatteryStream),
        returnValue: _i6.Stream<bool>.empty(),
      ) as _i6.Stream<bool>);

  @override
  _i6.Stream<bool> get chargingStateStream => (super.noSuchMethod(
        Invocation.getter(#chargingStateStream),
        returnValue: _i6.Stream<bool>.empty(),
      ) as _i6.Stream<bool>);

  @override
  int get currentBatteryLevel => (super.noSuchMethod(
        Invocation.getter(#currentBatteryLevel),
        returnValue: 0,
      ) as int);

  @override
  _i8.BatteryState get currentBatteryState => (super.noSuchMethod(
        Invocation.getter(#currentBatteryState),
        returnValue: _i8.BatteryState.full,
      ) as _i8.BatteryState);

  @override
  bool get isLowBattery => (super.noSuchMethod(
        Invocation.getter(#isLowBattery),
        returnValue: false,
      ) as bool);

  @override
  bool get isCharging => (super.noSuchMethod(
        Invocation.getter(#isCharging),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  bool shouldStopScanning() => (super.noSuchMethod(
        Invocation.method(
          #shouldStopScanning,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  String getBatteryStatusText() => (super.noSuchMethod(
        Invocation.method(
          #getBatteryStatusText,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getBatteryStatusText,
            [],
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i10.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i11.Position?> get locationStream => (super.noSuchMethod(
        Invocation.getter(#locationStream),
        returnValue: _i6.Stream<_i11.Position?>.empty(),
      ) as _i6.Stream<_i11.Position?>);

  @override
  _i6.Future<bool> requestPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestPermissions,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i11.Position?> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i6.Future<_i11.Position?>.value(),
      ) as _i6.Future<_i11.Position?>);

  @override
  _i6.Future<void> startLocationTracking() => (super.noSuchMethod(
        Invocation.method(
          #startLocationTracking,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void stopLocationTracking() => super.noSuchMethod(
        Invocation.method(
          #stopLocationTracking,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<double> getDistanceBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDistanceBetween,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: _i6.Future<double>.value(0.0),
      ) as _i6.Future<double>);

  @override
  String getLocationString(_i11.Position? position) => (super.noSuchMethod(
        Invocation.method(
          #getLocationString,
          [position],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getLocationString,
            [position],
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i12.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i6.Future<_i3.Database>.value(_FakeDatabase_1(
          this,
          Invocation.getter(#database),
        )),
      ) as _i6.Future<_i3.Database>);

  @override
  _i6.Future<int> insertDevice(_i13.BluetoothDeviceRecord? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertDevice,
          [device],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<List<_i13.BluetoothDeviceRecord>> getAllDevices() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDevices,
          [],
        ),
        returnValue: _i6.Future<List<_i13.BluetoothDeviceRecord>>.value(
            <_i13.BluetoothDeviceRecord>[]),
      ) as _i6.Future<List<_i13.BluetoothDeviceRecord>>);

  @override
  _i6.Future<List<_i13.BluetoothDeviceRecord>> getDevicesByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevicesByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i6.Future<List<_i13.BluetoothDeviceRecord>>.value(
            <_i13.BluetoothDeviceRecord>[]),
      ) as _i6.Future<List<_i13.BluetoothDeviceRecord>>);

  @override
  _i6.Future<List<_i13.BluetoothDeviceRecord>> getUniqueDevices() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUniqueDevices,
          [],
        ),
        returnValue: _i6.Future<List<_i13.BluetoothDeviceRecord>>.value(
            <_i13.BluetoothDeviceRecord>[]),
      ) as _i6.Future<List<_i13.BluetoothDeviceRecord>>);

  @override
  _i6.Future<List<_i13.BluetoothDeviceRecord>> getDevicesByMacAddress(
          String? macAddress) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevicesByMacAddress,
          [macAddress],
        ),
        returnValue: _i6.Future<List<_i13.BluetoothDeviceRecord>>.value(
            <_i13.BluetoothDeviceRecord>[]),
      ) as _i6.Future<List<_i13.BluetoothDeviceRecord>>);

  @override
  _i6.Future<int> getDeviceCount() => (super.noSuchMethod(
        Invocation.method(
          #getDeviceCount,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> getUniqueDeviceCount() => (super.noSuchMethod(
        Invocation.method(
          #getUniqueDeviceCount,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<void> deleteOldRecords(DateTime? beforeDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOldRecords,
          [beforeDate],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i14.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [BluetoothDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockBluetoothDevice extends _i1.Mock implements _i15.BluetoothDevice {
  MockBluetoothDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DeviceIdentifier get remoteId => (super.noSuchMethod(
        Invocation.getter(#remoteId),
        returnValue: _FakeDeviceIdentifier_2(
          this,
          Invocation.getter(#remoteId),
        ),
      ) as _i4.DeviceIdentifier);

  @override
  String get platformName => (super.noSuchMethod(
        Invocation.getter(#platformName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
      ) as String);

  @override
  String get advName => (super.noSuchMethod(
        Invocation.getter(#advName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#advName),
        ),
      ) as String);

  @override
  List<_i15.BluetoothService> get servicesList => (super.noSuchMethod(
        Invocation.getter(#servicesList),
        returnValue: <_i15.BluetoothService>[],
      ) as List<_i15.BluetoothService>);

  @override
  bool get isAutoConnectEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoConnectEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
      ) as bool);

  @override
  _i6.Stream<_i15.BluetoothConnectionState> get connectionState =>
      (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i6.Stream<_i15.BluetoothConnectionState>.empty(),
      ) as _i6.Stream<_i15.BluetoothConnectionState>);

  @override
  int get mtuNow => (super.noSuchMethod(
        Invocation.getter(#mtuNow),
        returnValue: 0,
      ) as int);

  @override
  _i6.Stream<int> get mtu => (super.noSuchMethod(
        Invocation.getter(#mtu),
        returnValue: _i6.Stream<int>.empty(),
      ) as _i6.Stream<int>);

  @override
  _i6.Stream<void> get onServicesReset => (super.noSuchMethod(
        Invocation.getter(#onServicesReset),
        returnValue: _i6.Stream<void>.empty(),
      ) as _i6.Stream<void>);

  @override
  _i6.Stream<_i15.BluetoothBondState> get bondState => (super.noSuchMethod(
        Invocation.getter(#bondState),
        returnValue: _i6.Stream<_i15.BluetoothBondState>.empty(),
      ) as _i6.Stream<_i15.BluetoothBondState>);

  @override
  _i6.Stream<bool> get isDiscoveringServices => (super.noSuchMethod(
        Invocation.getter(#isDiscoveringServices),
        returnValue: _i6.Stream<bool>.empty(),
      ) as _i6.Stream<bool>);

  @override
  _i4.DeviceIdentifier get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeDeviceIdentifier_2(
          this,
          Invocation.getter(#id),
        ),
      ) as _i4.DeviceIdentifier);

  @override
  String get localName => (super.noSuchMethod(
        Invocation.getter(#localName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i6.Stream<_i15.BluetoothConnectionState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i6.Stream<_i15.BluetoothConnectionState>.empty(),
      ) as _i6.Stream<_i15.BluetoothConnectionState>);

  @override
  _i6.Stream<List<_i15.BluetoothService>> get servicesStream =>
      (super.noSuchMethod(
        Invocation.getter(#servicesStream),
        returnValue: _i6.Stream<List<_i15.BluetoothService>>.empty(),
      ) as _i6.Stream<List<_i15.BluetoothService>>);

  @override
  _i6.Stream<List<_i15.BluetoothService>> get services => (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: _i6.Stream<List<_i15.BluetoothService>>.empty(),
      ) as _i6.Stream<List<_i15.BluetoothService>>);

  @override
  void cancelWhenDisconnected(
    _i6.StreamSubscription<dynamic>? subscription, {
    bool? next = false,
    bool? delayed = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #cancelWhenDisconnected,
          [subscription],
          {
            #next: next,
            #delayed: delayed,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> connect({
    Duration? timeout = const Duration(seconds: 35),
    int? mtu = 512,
    bool? autoConnect = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #timeout: timeout,
            #mtu: mtu,
            #autoConnect: autoConnect,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> disconnect({
    int? timeout = 35,
    bool? queue = true,
    int? androidDelay = 2000,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {
            #timeout: timeout,
            #queue: queue,
            #androidDelay: androidDelay,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i15.BluetoothService>> discoverServices({
    bool? subscribeToServicesChanged = true,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverServices,
          [],
          {
            #subscribeToServicesChanged: subscribeToServicesChanged,
            #timeout: timeout,
          },
        ),
        returnValue: _i6.Future<List<_i15.BluetoothService>>.value(
            <_i15.BluetoothService>[]),
      ) as _i6.Future<List<_i15.BluetoothService>>);

  @override
  _i6.Future<int> readRssi({int? timeout = 15}) => (super.noSuchMethod(
        Invocation.method(
          #readRssi,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> requestMtu(
    int? desiredMtu, {
    double? predelay = 0.35,
    int? timeout = 15,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestMtu,
          [desiredMtu],
          {
            #predelay: predelay,
            #timeout: timeout,
          },
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<void> requestConnectionPriority(
          {required _i15.ConnectionPriority? connectionPriorityRequest}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestConnectionPriority,
          [],
          {#connectionPriorityRequest: connectionPriorityRequest},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setPreferredPhy({
    required int? txPhy,
    required int? rxPhy,
    required _i15.PhyCoding? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPhy,
          [],
          {
            #txPhy: txPhy,
            #rxPhy: rxPhy,
            #option: option,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> createBond({
    int? timeout = 90,
    _i16.Uint8List? pin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBond,
          [],
          {
            #timeout: timeout,
            #pin: pin,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> removeBond({int? timeout = 30}) => (super.noSuchMethod(
        Invocation.method(
          #removeBond,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clearGattCache() => (super.noSuchMethod(
        Invocation.method(
          #clearGattCache,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> pair() => (super.noSuchMethod(
        Invocation.method(
          #pair,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AdvertisementData].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdvertisementData extends _i1.Mock implements _i15.AdvertisementData {
  MockAdvertisementData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get advName => (super.noSuchMethod(
        Invocation.getter(#advName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#advName),
        ),
      ) as String);

  @override
  bool get connectable => (super.noSuchMethod(
        Invocation.getter(#connectable),
        returnValue: false,
      ) as bool);

  @override
  Map<int, List<int>> get manufacturerData => (super.noSuchMethod(
        Invocation.getter(#manufacturerData),
        returnValue: <int, List<int>>{},
      ) as Map<int, List<int>>);

  @override
  Map<_i4.Guid, List<int>> get serviceData => (super.noSuchMethod(
        Invocation.getter(#serviceData),
        returnValue: <_i4.Guid, List<int>>{},
      ) as Map<_i4.Guid, List<int>>);

  @override
  List<_i4.Guid> get serviceUuids => (super.noSuchMethod(
        Invocation.getter(#serviceUuids),
        returnValue: <_i4.Guid>[],
      ) as List<_i4.Guid>);

  @override
  List<List<int>> get msd => (super.noSuchMethod(
        Invocation.getter(#msd),
        returnValue: <List<int>>[],
      ) as List<List<int>>);

  @override
  String get localName => (super.noSuchMethod(
        Invocation.getter(#localName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
      ) as String);
}
